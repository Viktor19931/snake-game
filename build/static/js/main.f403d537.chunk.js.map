{"version":3,"sources":["Wrapper.ts","components/Snake.tsx","components/Food.tsx","helpers/getRandomCoordinates.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SnakeDot","styled","div","top","left","SnakeHead","direction","css","getAngel","SnakeTopEye","SnakeBottomEye","Tongue","RWrapper","GameArea","FoodDot","Snake","snakeCoordinates","length","slice","map","c","key","Food","foodCoordinates","floor","Math","random","initSnakeCoordinates","App","useState","setSnakeCoordinates","getRandomCoordinates","setFoodCoordinates","setDirection","speed","setSpeed","score","setScore","directionMap","37","38","39","40","onKeyDown","useCallback","event","prev","next","keyCode","increaseSpeed","enlargeSnake","newSnake","unshift","useEffect","head","s","checkIfEat","snake","pop","forEach","dot","onGameOver","checkIfCollapsed","dots","push","shift","setTimeout","checkIfOutOfBorders","callback","delay","savedCallback","useRef","savedId","current","setInterval","clearInterval","useInterval","console","log","document","onkeydown","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f403d537.chunk.js","sourcesContent":["import styled, { css } from \"styled-components\";\n\ntype DotProps = {\n  top: number;\n  left: number;\n};\n\nexport const SnakeDot = styled.div<DotProps>`\n  width: 2%;\n  height: 2%;\n  z-index: 2;\n  position: absolute;\n  border: 1px solid #fff;\n  background-color: #000;\n  top: ${({ top }) => top}%;\n  left: ${({ left }) => left}%;\n`;\n\nconst getAngel = (direction: string) =>\n  direction === \"DOWN\"\n    ? 90\n    : direction === \"UP\"\n    ? 270\n    : direction === \"LEFT\"\n    ? 180\n    : 0;\n\nexport const SnakeHead = styled(SnakeDot)<{ direction: string }>`\n  background-color: violet;\n  border-radius: 0 6px 6px 0;\n  ${({ direction }) => css`\n    transform: rotate(${getAngel(direction)}deg);\n  `}\n`;\n\nexport const SnakeTopEye = styled.div`\n  height: 4px;\n  width: 4px;\n  position: absolute;\n  top: 0.5px;\n  right: 4px;\n  background-color: #fff;\n  border-radius: 50%;\n  &:before {\n    right: 0;\n    top: 1px;\n    width: 2px;\n    content: \"\";\n    height: 2px;\n    border-radius: 50%;\n    position: absolute;\n    background-color: #000;\n  }\n`;\n\nexport const SnakeBottomEye = styled(SnakeTopEye)`\n  top: unset;\n  bottom: 0.5px;\n`;\n\nexport const Tongue = styled.div`\n  top: 4px;\n  width: 7px;\n  height: 2px;\n  right: -7px;\n  z-index: -1;\n  position: absolute;\n  background-color: red;\n  &:before {\n    content: \"\";\n    width: 0;\n    height: 0;\n    right: 0px;\n    position: absolute;\n    border-style: solid;\n    border-width: 1px 3px 1px 0;\n    border-color: transparent #fff transparent transparent;\n  }\n`;\n\nexport const RWrapper = styled.div`\n  position: relative;\n  height: 100%;\n  width: 100%;\n  border: 1px solid violet;\n  box-sizing: border-box;\n  border-radius: 0 6px 6px 0;\n`;\n\nexport const GameArea = styled.div`\n  width: 600px;\n  height: 600px;\n  overflow: hidden;\n  margin: 50px auto;\n  position: relative;\n  border: 2px solid #000;\n`;\n\nexport const FoodDot = styled.div<DotProps>`\n  width: 2%;\n  height: 2%;\n  z-index: 1;\n  position: absolute;\n  background-color: red;\n  border: 1px solid #fff;\n  top: ${({ top }) => top}%;\n  left: ${({ left }) => left}%;\n`;\n","import React, { FC } from \"react\";\nimport {\n  SnakeDot,\n  SnakeHead,\n  RWrapper,\n  SnakeTopEye,\n  SnakeBottomEye,\n  Tongue,\n} from \"../Wrapper\";\n\ntype SnakeProps = {\n  direction: string;\n  snakeCoordinates: number[][];\n};\n\nconst Snake: FC<SnakeProps> = ({ snakeCoordinates, direction }) => {\n  return (\n    <>\n      <SnakeHead\n        {...{ direction }}\n        left={snakeCoordinates[snakeCoordinates.length - 1][0]}\n        top={snakeCoordinates[snakeCoordinates.length - 1][1]}\n      >\n        <RWrapper>\n          <SnakeTopEye />\n          <SnakeBottomEye />\n          <Tongue />\n        </RWrapper>\n      </SnakeHead>\n      {snakeCoordinates.slice(0, -1).map((c) => (\n        <SnakeDot key={`${c[0]}-${c[1]}`} left={c[0]} top={c[1]} />\n      ))}\n    </>\n  );\n};\n\nexport default Snake;\n","import React, { FC } from \"react\";\nimport { FoodDot } from \"../Wrapper\";\n\ntype FoodProps = {\n  foodCoordinates: number[];\n};\n\nconst Food: FC<FoodProps> = ({ foodCoordinates }) => (\n  <FoodDot left={foodCoordinates[0]} top={foodCoordinates[1]} />\n);\n\nexport default Food;\n","export default () => {\n  const min = 1;\n  const max = 98;\n  const { floor, random } = Math;\n  const x = floor((random() * (max - min + 1) + min) / 2) * 2;\n  const y = floor((random() * (max - min + 1) + min) / 2) * 2;\n\n  return [x, y];\n};\n","import React, { FC, useState, useEffect, useRef, useCallback } from \"react\";\nimport { GameArea } from \"./Wrapper\";\nimport Snake from \"./components/Snake\";\nimport Food from \"./components/Food\";\nimport getRandomCoordinates from \"./helpers/getRandomCoordinates\";\n\nconst useInterval = (callback: () => void, delay: number) => {\n  const savedCallback = useRef<any>();\n  const savedId = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    savedId.current = setInterval(tick, delay);\n    return () => clearInterval(savedId.current);\n  }, [delay]);\n};\n\nconst initSnakeCoordinates = [\n  [0, 0],\n  [2, 0],\n  [4, 0],\n];\n\nconst initialDirection = \"RIGHT\";\n\nconst App: FC = () => {\n  const [snakeCoordinates, setSnakeCoordinates] = useState(\n    initSnakeCoordinates\n  );\n  const [foodCoordinates, setFoodCoordinates] = useState(\n    getRandomCoordinates()\n  );\n  const [direction, setDirection] = useState(initialDirection);\n  const [speed, setSpeed] = useState(500);\n  const [score, setScore] = useState(0);\n\n  const isAllowedDirection = (prev: string, next: string) =>\n    !(\n      (prev === \"LEFT\" && next === \"RIGHT\") ||\n      (prev === \"RIGHT\" && next === \"LEFT\") ||\n      (prev === \"UP\" && next === \"DOWN\") ||\n      (prev === \"DOWN\" && next === \"UP\")\n    );\n\n  const directionMap: { [key: number]: string } = {\n    37: \"LEFT\",\n    38: \"UP\",\n    39: \"RIGHT\",\n    40: \"DOWN\",\n  };\n\n  const onKeyDown = useCallback(\n    (event: any) => {\n      isAllowedDirection(direction, directionMap[event.keyCode]) &&\n        setDirection(directionMap[event.keyCode]);\n    },\n    [direction, directionMap]\n  );\n\n  const checkIfOutOfBorders = () => {\n    const head = snakeCoordinates[snakeCoordinates.length - 1];\n    if (head[0] > 99 || head[1] > 99 || head[0] < 0 || head[1] < 0) {\n      const dots = [...snakeCoordinates];\n      let head = dots[dots.length - 1];\n\n      switch (direction) {\n        case \"RIGHT\":\n          head = [0, head[1]];\n          break;\n        case \"LEFT\":\n          head = [98, head[1]];\n          break;\n        case \"DOWN\":\n          head = [head[0], 0];\n          break;\n        case \"UP\":\n          head = [head[0], 98];\n          break;\n      }\n\n      dots.push(head);\n      dots.shift();\n      setTimeout(() => setSnakeCoordinates(dots), 0);\n    }\n  };\n\n  const checkIfCollapsed = () => {\n    const snake = [...snakeCoordinates];\n    const head = snakeCoordinates[snakeCoordinates.length - 1];\n\n    snake.pop();\n    snake.forEach((dot) => {\n      if (dot[0] === head[0] && dot[1] === head[1]) {\n        onGameOver();\n      }\n    });\n  };\n\n  const checkIfEat = () => {\n    let head = snakeCoordinates[snakeCoordinates.length - 1];\n    if (head[0] === foodCoordinates[0] && head[1] === foodCoordinates[1]) {\n      setFoodCoordinates(getRandomCoordinates());\n      setScore((s) => s + 1);\n      enlargeSnake();\n      increaseSpeed();\n    }\n  };\n\n  const increaseSpeed = () => {\n    if (speed > 10) {\n      setSpeed(speed - 10);\n    }\n  };\n\n  const enlargeSnake = () => {\n    let newSnake = [...snakeCoordinates];\n    newSnake.unshift(snakeCoordinates[0]);\n    setSnakeCoordinates(newSnake);\n  };\n\n  useEffect(() => {\n    checkIfEat();\n    checkIfCollapsed();\n    checkIfOutOfBorders();\n  });\n\n  const onGameOver = () => {\n    setDirection(initialDirection);\n    setSnakeCoordinates(initSnakeCoordinates);\n    setScore(0);\n    // alert(`Game over with score ${score}`);\n  };\n\n  const moveSnake = () => {\n    const dots = [...snakeCoordinates];\n    let head = dots[dots.length - 1];\n\n    switch (direction) {\n      case \"RIGHT\":\n        head = [head[0] + 2, head[1]];\n        break;\n      case \"LEFT\":\n        head = [head[0] - 2, head[1]];\n        break;\n      case \"DOWN\":\n        head = [head[0], head[1] + 2];\n        break;\n      case \"UP\":\n        head = [head[0], head[1] - 2];\n        break;\n    }\n\n    dots.push(head);\n    dots.shift();\n    console.log(dots);\n    setSnakeCoordinates(dots);\n  };\n\n  useInterval(moveSnake, speed);\n\n  useEffect(() => {\n    document.onkeydown = onKeyDown;\n  }, [onKeyDown]);\n\n  return (\n    <>\n      <span>{`Your score is ${score} `}</span>\n      <GameArea>\n        <Snake {...{ snakeCoordinates, direction }} />\n        <Food {...{ foodCoordinates }} />\n      </GameArea>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}